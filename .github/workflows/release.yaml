name: Build and Deploy User API

# This workflow runs on every push to the main branch
on:
  push:
    branches: [ "main" ]

env:
  # The prefix for your container images
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  # Job 1: Build the code, create a Docker image, and push it to the registry
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      # Makes the image tag available to other jobs
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # This creates a unique tag for each commit (e.g., a1b2c3d)
          tags: type=sha,prefix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Job 2: Deploy the new image to the Kubernetes cluster
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    # This job will only run after the 'build-and-push' job succeeds
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Save Kubernetes config
        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          # Use Helm to upgrade the application. This is the best practice.
          # It installs the app if it's not there, or upgrades it if it is.
          helm upgrade --install league-of-locals-user-api ./kube \
            --set image.tag=${{ needs.build-and-push.outputs.image_tag }} \
            --namespace default